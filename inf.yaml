### **Ingress Node Firewall Operator**

The **Ingress Node Firewall Operator** provides a centralized mechanism for managing ingress firewall rules at a node level within a Kubernetes or OpenShift cluster. It leverages **daemon sets** to apply firewall rules on specified nodes and uses the custom resource (CR) `IngressNodeFirewallConfig` to define and apply those rules.

---

### **Overview**

The **Ingress Node Firewall Operator** is designed to help network administrators define, deploy, and manage ingress firewall rules on a node-by-node basis. It is useful for applying network security rules that control inbound traffic (ingress) to specific nodes in the cluster, especially at a granular level.

#### **Key Features**
- **Stateless Firewall Rules**: The operator supports only stateless firewall rules, which means it does not track connections but instead filters traffic based on fixed parameters like IP address, protocol, and ports.
- **Daemon Set Deployment**: The operator deploys a **DaemonSet** to nodes that match the specified **nodeSelector** in the configuration, ensuring that firewall rules are applied at the node level.
- **OpenShift Version Compatibility**: The operator is supported on OpenShift 4.14 or later, and requires RHEL 9.0 or later for proper operation.

---

### **Prerequisites**

1. **OpenShift CLI (oc)**: Ensure that you have the OpenShift CLI installed and configured on your machine.
2. **Administrator Privileges**: You need administrator privileges to install and configure the operator and its resources in the OpenShift cluster.
3. **Cluster Version**: OpenShift 4.14 or later and RHEL 9.0 or later.

---

### **Installing the Ingress Node Firewall Operator**

#### **Installing the Operator Using the CLI**

1. **Create the Namespace**:
   Create a new namespace for the **Ingress Node Firewall**:

   ```bash
   cat << EOF | oc create -f -
   apiVersion: v1
   kind: Namespace
   metadata:
     labels:
       pod-security.kubernetes.io/enforce: privileged
       pod-security.kubernetes.io/enforce-version: v1.24
     name: openshift-ingress-node-firewall
   EOF
   ```

2. **Create the Operator Group**:
   Define an **OperatorGroup** in the `openshift-ingress-node-firewall` namespace:

   ```bash
   cat << EOF | oc create -f -
   apiVersion: operators.coreos.com/v1
   kind: OperatorGroup
   metadata:
     name: ingress-node-firewall-operators
     namespace: openshift-ingress-node-firewall
   EOF
   ```

3. **Create the Subscription**:
   Subscribe to the **Ingress Node Firewall** Operator:

   ```bash
   cat << EOF | oc create -f -
   apiVersion: operators.coreos.com/v1alpha1
   kind: Subscription
   metadata:
     name: ingress-node-firewall-sub
     namespace: openshift-ingress-node-firewall
   spec:
     name: ingress-node-firewall
     channel: stable
     source: redhat-operators
     sourceNamespace: openshift-marketplace
   EOF
   ```

4. **Verify the Installation**:
   Ensure the operator is installed and running by checking its CSV (ClusterServiceVersion):

   ```bash
   oc get csv -n openshift-ingress-node-firewall
   ```

   You should see output similar to the following:

   ```bash
   NAME                                        DISPLAY                          VERSION               REPLACES                                    PHASE
   ingress-node-firewall.4.16.0-202211122336   Ingress Node Firewall Operator   4.16.0-202211122336   ingress-node-firewall.4.16.0-202211102047   Succeeded
   ```

#### **Installing the Operator Using the Web Console**

1. **Navigate to the OpenShift Console**:
   Go to **Operators** → **OperatorHub**.

2. **Search for the Ingress Node Firewall Operator**:
   Search for **Ingress Node Firewall Operator** in the list of available operators.

3. **Install the Operator**:
   Select the operator and click **Install**. Under the **Installed Namespace**, select the recommended namespace (usually `openshift-ingress-node-firewall`).

4. **Verify the Installation**:
   After installation, verify that the operator has a **Status of InstallSucceeded** under **Operators** → **Installed Operators**.

---

### **Configuring Ingress Node Firewall Rules**

To create firewall rules for nodes, you need to configure the `IngressNodeFirewallConfig` custom resource (CR).

#### **Example: Ingress Node Firewall Config Object**

Here’s an example of the `IngressNodeFirewallConfig` that applies firewall rules to nodes with the `node-role.kubernetes.io/worker` label:

```yaml
apiVersion: ingressnodefirewall.openshift.io/v1alpha1
kind: IngressNodeFirewallConfig
metadata:
  name: ingressnodefirewallconfig
  namespace: openshift-ingress-node-firewall
spec:
  nodeSelector:
    node-role.kubernetes.io/worker: ""
```

This CR deploys the firewall on all nodes that have the `worker` role. You can adjust the `nodeSelector` to match specific nodes or node groups.

---

### **Deploying Firewall Rules for a Specific Node**

To define ingress rules for a specific node, you can use a `IngressNodeFirewall` custom resource. Here is an example of a configuration that blocks ICMP traffic (ping requests) on a node (`worker-0`) and denies TCP traffic on ports 8000–9000.

#### **Example: Block ICMP Traffic on Node**

```yaml
apiVersion: ingressnodefirewall.openshift.io/v1alpha1
kind: IngressNodeFirewall
metadata:
  name: ingressnodefirewall-worker-0
spec:
  interfaces:
    - ens3
  nodeSelector:
    matchLabels:
      kubernetes.io/hostname: worker-0
  ingress:
    - sourceCIDRs:
        - 0.0.0.0/0
      rules:
        - order: 10
          protocolConfig:
            protocol: ICMP
            icmp:
              icmpType: 8  # Type 8 is Echo Request (ping)
          action: Deny
        - order: 20
          protocolConfig:
            protocol: TCP
            tcp:
              ports: "8000-9000"
          action: Deny
```

In this example:
- **ICMP (ping)** traffic is blocked from all sources (`0.0.0.0/0`).
- **TCP** traffic on ports `8000–9000` is also blocked.

#### **Verify Firewall Rules**

To check the status of your firewall rules, you can run the following command:

```bash
oc get ingressnodefirewall
```

---

### **Troubleshooting and Monitoring**

#### **Checking the Pods**

Once the operator is installed and configured, check the status of the related pods:

```bash
oc get pods -n openshift-ingress-node-firewall
```

You should see output similar to the following, indicating that both the controller and the daemon set pods are running:

```bash
NAME                                                         READY   STATUS    RESTARTS   AGE
ingress-node-firewall-controller-manager-xxxx   2/2     Running   0          2m51s
ingress-node-firewall-daemon-xxxx                         3/3     Running   0          18s
ingress-node-firewall-daemon-xxxx                         3/3     Running   0          18s
```

#### **Namespace Annotation**

For single-node OpenShift clusters, the **openshift-ingress-node-firewall** namespace needs an annotation to allow management workloads:

```bash
oc annotate ns/openshift-ingress-node-firewall workload.openshift.io/allowed=management
```

---

### **Use Cases for the Ingress Node Firewall**

The **Ingress Node Firewall Operator** is particularly useful in scenarios where:

1. **Granular Security Control**: You need to apply firewall rules at the node level instead of at the cluster or pod level. For instance, specific nodes might require stricter ingress controls due to their role (e.g., worker nodes).
2. **Blocking Malicious Traffic**: It can be used to block certain types of traffic, like ICMP or specific TCP ports, which might be susceptible to attacks or need to be restricted.
3. **Performance and Efficiency**: By applying rules closer to the node, traffic filtering is performed earlier, which can improve performance by reducing unnecessary traffic flow within the cluster.
4. **Compliance and Regulatory Requirements**: Some environments may have strict regulatory or security requirements that demand specific firewall rules at the node level.

---

### **Conclusion**

The **Ingress Node Firewall Operator** provides a powerful way to control ingress traffic at the node level in Kubernetes or OpenShift clusters. By using custom resources like `IngressNodeFirewallConfig` and `IngressNodeFirewall`, you can fine-tune your cluster's security and network performance based on specific use cases or requirements.
