# **File Integrity Operator Installation Guide**

## **Overview**
The **File Integrity Operator** for OpenShift provides a mechanism to monitor the integrity of files and directories across the cluster. It uses **AIDE** (Advanced Intrusion Detection Environment) to verify the integrity of files. By creating a baseline database of file attributes (such as file hashes), AIDE can detect changes to files that may indicate potential security breaches.

The **File Integrity Operator** specifically monitors files in critical system directories. Any manual changes made to the files in these locations are detected by the operator, and the changes are reflected in the **FileIntegrityNodeStatus** and **ConfigMap**.

This guide explains how to install the **File Integrity Operator** via both the OpenShift Web Console and CLI, followed by configuring the **FileIntegrity** instance and verifying its status.

## **Installing the File Integrity Operator**

### **Installing via OpenShift Web Console**

1. Navigate to the **OpenShift Container Platform** web console.
2. From the left sidebar, select **Operators** → **OperatorHub**.
3. In the search bar, type **File Integrity Operator** and click **Install**.
4. In the installation settings, keep the default selection for **Installation mode** and **namespace** to ensure the operator is installed into the `openshift-file-integrity` namespace.
5. Click **Install** to complete the installation.

### **Installing via Command-Line Interface (CLI)**

You can also install the **File Integrity Operator** using `oc` commands. Follow these steps:

1. **Create the Namespace:**
   First, create the `openshift-file-integrity` namespace.

   ```bash
   oc create -f <file-name>.yaml
   ```

   Example namespace definition (`<file-name>.yaml`):

   ```yaml
   apiVersion: v1
   kind: Namespace
   metadata:
     labels:
       openshift.io/cluster-monitoring: "true"
       pod-security.kubernetes.io/enforce: privileged
     name: openshift-file-integrity
   ```

2. **Create the OperatorGroup:**
   Create the `OperatorGroup` for the **File Integrity Operator**.

   ```bash
   oc create -f <file-name>.yaml
   ```

   Example `OperatorGroup` definition (`<file-name>.yaml`):

   ```yaml
   apiVersion: operators.coreos.com/v1
   kind: OperatorGroup
   metadata:
     name: file-integrity-operator
     namespace: openshift-file-integrity
   spec:
     targetNamespaces:
     - openshift-file-integrity
   ```

3. **Create the Subscription:**
   Create a subscription for the **File Integrity Operator** to allow it to be installed.

   ```bash
   oc create -f <file-name>.yaml
   ```

   Example `Subscription` definition (`<file-name>.yaml`):

   ```yaml
   apiVersion: operators.coreos.com/v1alpha1
   kind: Subscription
   metadata:
     name: file-integrity-operator
     namespace: openshift-file-integrity
   spec:
     channel: "stable"
     installPlanApproval: Automatic
     name: file-integrity-operator
     source: redhat-operators
     sourceNamespace: openshift-marketplace
   ```

4. **Verify Installation:**
   Once installed, you can verify the status of the operator and its deployment:

   ```bash
   oc get csv -n openshift-file-integrity
   oc get deploy -n openshift-file-integrity
   ```

## **Configuring the FileIntegrity Instance**

Once the operator is installed, you need to configure the **FileIntegrity** instance. This defines how the operator should monitor file integrity on the nodes/cluster.

### **Example FileIntegrity Configuration:**

You can define a `FileIntegrity` instance as follows:

```yaml
apiVersion: fileintegrity.openshift.io/v1alpha1
kind: FileIntegrity
metadata:
  name: worker-fileintegrity
  namespace: openshift-file-integrity
spec:
  config:
    gracePeriod: 20
    initialDelay: 60
    key: config
    maxBackups: 5
    name: config
    namespace: openshift-file-integrity
  debug: true
  nodeSelector:
    node.openshift.io/os_id: rhcos
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Equal
      value: 'true'
    - effect: NoSchedule
      key: node-role.kubernetes.io/infra
      operator: Exists
status:
  phase: Active
```

- **gracePeriod**: Defines the time (in seconds) the system waits before considering a file for integrity verification after a change.
- **initialDelay**: The delay before the first integrity check is run.
- **maxBackups**: Limits the number of backup files to retain.
- **debug**: Set to `true` for debugging purposes, which provides more detailed logs.
- **nodeSelector**: Limits the scope of the operator to specific node types (e.g., `rhcos` nodes).
- **tolerations**: Ensures the operator can run on master or infra nodes.

### **GitHub Repository**
Repo link:- [here]

## **File Integrity Monitoring Directories**

By default, the **File Integrity Operator** monitors the following directories for file integrity checks:

- `/root`
- `/boot`
- `/usr`
- `/etc`

Any changes made to the files in these locations (manual) will be detected and monitored by the **File Integrity Operator**. If changes are detected, the **FileIntegrityNodeStatus** will reflect these changes, and the **ConfigMap** will provide detailed information about the modifications.

## **How File Integrity Works**

The **File Integrity Operator** uses **AIDE** (Advanced Intrusion Detection Environment) to track and verify file integrity. Here's how it works:

1. **AIDE Database**: The first step in using AIDE is to create a baseline database. This database is built using regular expression rules that AIDE extracts from the configuration file(s). These rules specify which file attributes (such as file hashes, permissions, and timestamps) to monitor.

2. **File Integrity Check**: Once the database is created, it is used to verify file integrity. When a file’s attributes change (e.g., if the contents are modified), AIDE can detect the inconsistency based on the rules defined in the database.

3. **Message Digest Algorithms**: AIDE supports several message digest algorithms, such as MD5, SHA-1, and SHA-256, to calculate checksums for the monitored files. These checksums are stored in the AIDE database and are used for subsequent integrity checks.

4. **Consistency Checks**: In addition to checksums, AIDE can also monitor other file attributes such as size, permissions, and ownership. If any of these attributes change, it will be flagged as a potential issue.

5. **Version Compatibility**: AIDE can read and verify databases from both older and newer versions, making it flexible and compatible with various configurations.

6. **Manual Pages**: For more detailed information about AIDE and its configuration options, refer to the manual pages included with the distribution.

---

## **Example: Verifying File Integrity**

After deploying and configuring the **File Integrity Operator**, you can verify its status using the following commands.

### **1. Checking the File Integrity Operator Deployment**

Run the following command to check the status of the File Integrity Operator deployment:

```bash
oc get deploy -n openshift-file-integrity
```

Output:

```bash
NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
file-integrity-operator   1/1     1            1           17s
```

### **2. Checking the FileIntegrity Instance**

You can check the `FileIntegrity` instances deployed in the cluster:

```bash
oc get fileintegrities -n openshift-file-integrity
```

Output:

```bash
NAME                   AGE
worker-fileintegrity   70s
```

### **3. Checking the Status of the FileIntegrity Instance**

To check the current phase of a specific `FileIntegrity` instance, run the following command:

```bash
oc get fileintegrities/worker-fileintegrity  -o jsonpath="{ .status.phase }"
```

Output:

```bash
Active
```

### **4. Checking the File Integrity Node Statuses**

To check the status of the nodes where file integrity checks are performed, use the following command:

```bash
oc get fileintegritynodestatuses
```

Output:

```bash
NAME                                    NODE                STATUS
worker-fileintegrity-worker-0.xxxxxxx   worker-0.xxxxxxx    Succeeded
worker-fileintegrity-worker-1.xxxxxxx   worker-1.xxxxxxx    Succeeded
```

---

### **5. Handling File Changes on Nodes**

If a file on one of the monitored nodes changes, you can expect to see changes reflected in the **FileIntegrityNodeStatus**. For example, if a file is modified, the status may show something like `Failed` or `Changed` instead of `Succeeded`.

To simulate a file change on a node:

1. Start debugging on a specific node:

   ```bash
   oc debug node/worker-0xxxxx
   ```

   Output:

   ```bash
   Temporary namespace openshift-debug-0xxxxx is created for debugging node...
   Starting pod/worker-0xxxxx ...
   To use host binaries, run `chroot /host`
   Pod IP: 10.0.xx.xx
   If you don't see a command prompt, try pressing enter.
   ```

2. Enter the container’s environment:

   ```bash
   sh-5.1# chroot /host
   sh-5.1# echo "# integrity test" >> /host/etc/resolv.conf
   ```

   This simulates a change to the `/etc/resolv.conf` file.

3. **Check the ConfigMap for Changes**:
   ```bash
   oc get cm -n openshift-file-integrity
   ```

   Once the change has been made to the file, you can check the **FileIntegrity** status again:

   ```bash
   oc get fileintegritynodestatuses
   ```

   Output after file change:

   ```bash
   NAME                                    NODE                STATUS
   worker-fileintegrity-worker-0.xxxxxxx   worker-0.xxxxxxx    Changed
   worker-fileintegrity-worker-1.xxxxxxx   worker-1.xxxxxxx    Succeeded
   ```

4. **Check for File Integrity Events**:

   You can use the following command to check for events related to the File Integrity status:

   ```bash
   oc get events --field-selector reason=FileIntegrityStatus
   ```

   This will show any event that has occurred due to file integrity checks, such as a file modification or failure to verify a file’s integrity.

---

## **Conclusion**

The **File Integrity Operator** for OpenShift, based on **AIDE**, provides a robust solution for monitoring the integrity of files within your OpenShift cluster. By monitoring critical directories such as `/root`, `/boot`, `/usr`, and `/etc`, it ensures that any unauthorized changes to the system are detected. When changes are detected, the **FileIntegrityNodeStatus** reflects the status, and the **ConfigMap** provides details on exactly what was modified.

This provides a critical layer of security to help prevent tampering or unauthorized changes to important system files.
