
# **Grafana Deployment on OpenShift**

This document outlines the steps for deploying **Grafana** on OpenShift using the **Grafana Community Operator**. It includes setting up the operator, creating necessary secrets, deploying the Grafana instance, configuring routes, and integrating with **Prometheus** for monitoring.

## **Prerequisites**
- OpenShift 4.x or higher
- Cluster-admin privileges to install Operators and create resources
- The **Grafana Operator** should be available in the OpenShift Operator Hub

---

### **1. Install Grafana Community Operator**

1. Navigate to the **OpenShift Console**.
2. Go to **Operators → OperatorHub**.
3. Search for the **Grafana Community Operator** and click **Install**.
4. Choose **All namespaces on the cluster** as the installation mode and proceed with the installation.

---

### **2. Create a Namespace for Grafana Operator**

Create a new namespace (or project) for the **Grafana Operator** to manage the Grafana deployment.

```bash
oc create namespace grafana-operator
```

---

### **3. Create Grafana Credentials Secret**

In order to securely provide the username and password for Grafana, create a Kubernetes secret that will store the **admin user** and **password**.

#### Secret YAML:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: credentials
  namespace: grafana-operator
stringData:
  GF_SECURITY_ADMIN_PASSWORD: <password-here>
  GF_SECURITY_ADMIN_USER: <username-here>
type: Opaque
```

Apply the secret:

```bash
oc apply -f grafana-credentials-secret.yaml
```

---

### **4. Deploy Grafana Instance**

Use the following YAML to deploy a Grafana instance. This YAML defines the Grafana instance with authentication settings, version, and the environment variables pointing to the credentials secret.

#### Grafana Instance YAML:

```yaml
apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
  namespace: grafana-operator
  labels:
    dashboards: "grafana"
    folders: "grafana"
spec:
  deployment:
    spec:
      template:
        spec:
          containers:
            - name: grafana
              env:
                - name: GF_SECURITY_ADMIN_USER
                  valueFrom:
                    secretKeyRef:
                      key: GF_SECURITY_ADMIN_USER
                      name: credentials
                - name: GF_SECURITY_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: GF_SECURITY_ADMIN_PASSWORD
                      name: credentials
  config:
    auth:
      disable_login_form: "false"
      disable_signout_menu: "true"
    auth.anonymous:
      enabled: "false"
    log:
      level: warn
      mode: console
  version: 10.4.3
```

Apply the deployment:

```bash
oc apply -f grafana-deployment.yaml
```

---

### **5. Expose Grafana via OpenShift Route**

To make Grafana accessible from outside the OpenShift cluster, create an OpenShift **Route**. This will expose Grafana on a specific URL.

#### Grafana Route YAML:

```yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: grafana
  namespace: grafana-operator
  labels:
    app.kubernetes.io/managed-by: grafana-operator
spec:
  to:
    kind: Service
    name: grafana-service
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
    destinationCACertificate: ''
  host: <grafana-domain.*.apps.<complete-domain>
  port:
    targetPort: grafana
```

Make sure to replace the `host` field with the appropriate domain name. After creating the route, Grafana will be accessible at `https://<grafana-domain>`.

Apply the route:

```bash
oc apply -f grafana-route.yaml
```

---

### **6. Grant Permissions to Grafana Service Account**

To allow Grafana to access Prometheus metrics, you need to grant the Grafana service account access to the necessary resources.

```bash
oc adm policy add-cluster-role-to-user cluster-monitoring-view -z grafana-sa
```

---

### **7. Generate a Token for Grafana Service Account**

Generate a token for the Grafana service account so it can authenticate with Prometheus.

```bash
oc create token grafana-sa --duration=8760h
```

Copy the generated token.

---

### **8. Create Prometheus Token Secret**

Create a secret to store the Prometheus token that will be used in Grafana for authentication.

#### Token Secret YAML:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: token-prometheus
  namespace: grafana-operator
stringData:
  PROMETHEUS_TOKEN: '<complete-token-here>'
type: Opaque
```

Apply the secret:

```bash
oc apply -f prometheus-token-secret.yaml
```

---

### **9. Create Grafana Datasource for Prometheus**

Create a Grafana **Datasource** resource to integrate with **Thanos** (which aggregates metrics from Prometheus in OpenShift). This YAML configures the connection to Prometheus via the generated token.

#### Grafana Datasource YAML:

```yaml
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDatasource
metadata:
  name: grafana-ds
  namespace: grafana-operator
spec:
  valuesFrom:
    - targetPath: "secureJsonData.httpHeaderValue1"
      valueFrom:
        secretKeyRef:
          name: "token-prometheus"
          key: "PROMETHEUS_TOKEN"
  instanceSelector:
    matchLabels:
      dashboards: "grafana"
  datasource:
    name: Prometheus
    type: prometheus
    access: proxy
    url: https://thanos-querier.openshift-monitoring.svc.cluster.local:9091
    isDefault: true
    jsonData:
      "tlsSkipVerify": true
      "timeInterval": "5s"
      httpHeaderName1: 'Authorization'
    secureJsonData:
      "httpHeaderValue1": "Bearer ${PROMETHEUS_TOKEN}"
    editable: true
```

Apply the datasource configuration:

```bash
oc apply -f grafana-datasource.yaml
```

---

### **10. Access Grafana Dashboard**

You can now access the Grafana dashboard using the route URL provided earlier. This will allow you to visualize and monitor your OpenShift cluster’s metrics through Grafana.

- Navigate to: `https://<grafana-domain>`.

Log in using the **admin username** (`username-here`) and **admin password** (`password-here`).

---

### **11. Verify Grafana Datasource**

Once the datasource is created, follow these steps to verify and test the connection:

1. Navigate to the **Grafana Console**.
2. In the left-hand panel, go to **Connection → Data Sources**.
3. Find the **datasource** that you just created.
4. Click on the datasource and select **Save & Test** to check if Grafana can successfully connect to Prometheus.



